[{"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\index.js":"1","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\reportWebVitals.js":"2","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\App.js":"3","C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\sortingVisualizer\\SortingVisualizer.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":239,"mtime":1607178680244,"results":"8","hashOfConfig":"6"},{"size":1128,"mtime":1607182434331,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"qgeao7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\index.js",[],["20","21"],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\App.js",[],"C:\\Users\\SanyamS\\Documents\\My Dev\\Clever PG\\Projects\\sorting-visualizer\\src\\sortingVisualizer\\SortingVisualizer.jsx",["22"],"import React, { useState, useEffect } from 'react'\r\nimport './SortingVisualizer.css';\r\n\r\n\r\nconst SortingVisualizer = (props) => {\r\n    //set initial state to be empty\r\n    const [state, setState] = useState({\r\n        array: [],\r\n    });\r\n\r\n\r\n    //this hook calls method in it only when it is loaded first time i.e dependency array is empty\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, []);\r\n\r\n    // generates random no. between 5 and 1000 every time \r\n    const randomIntFromInterval = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    //create an array with 100 random numbers and resets the state of app.\r\n    const resetArray = () => {\r\n        const array = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push(randomIntFromInterval(5, 1000));\r\n        }\r\n        setState({ array });\r\n    }\r\n\r\n    const { array } = state;\r\n    return (\r\n        <div className='array-container'>\r\n            {array.map((value, idx) => { return <div className='array-bar' key={idx}>{value}</div> })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SortingVisualizer;",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":15,"column":8,"nodeType":"29","endLine":15,"endColumn":10,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [resetArray]",{"range":"36","text":"37"},[396,398],"[resetArray]"]